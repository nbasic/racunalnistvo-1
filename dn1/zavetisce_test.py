__author__ = 'Nino Bašić <nino.basic@fmf.uni-lj.si>'

import unittest
from zavetisce import Zavetisce2


class ZavetisceTest(unittest.TestCase):

    def test_posvoji_psa(self):
        z = Zavetisce2()
        z.najdena('Taček', 'pes')
        z.najdena('Šarki', 'pes')
        z.najdena('Tom', 'mačka')
        z.najdena('Nyan', 'mačka')
        z.najdena('Rex', 'pes')
        z.najdena('Elsa', 'mačka')
        z.najdena('Ork', 'pes')
        z.najdena('Oprah', 'mačka')
        self.assertEqual(z.posvoji_psa(), 'Taček')
        self.assertEqual(z.posvoji_psa(), 'Šarki')
        self.assertEqual(z.posvoji_psa(), 'Rex')
        self.assertEqual(z.posvoji_psa(), 'Ork')
        self.assertIsNone(z.posvoji_psa())

    def test_posvoji_psa_2(self):
        z = Zavetisce2()
        z.najdena('Taček', 'pes')
        z.najdena('Šarki', 'pes')
        z.najdena('Tom', 'mačka')
        z.najdena('Nyan', 'mačka')
        self.assertEqual(z.posvoji_psa(), 'Taček')
        self.assertEqual(z.posvoji_psa(), 'Šarki')
        self.assertIsNone(z.posvoji_psa())
        z.najdena('Rex', 'pes')
        z.najdena('Elsa', 'mačka')
        z.najdena('Ork', 'pes')
        z.najdena('Oprah', 'mačka')
        self.assertEqual(z.posvoji_psa(), 'Rex')
        self.assertEqual(z.posvoji_psa(), 'Ork')
        self.assertIsNone(z.posvoji_psa())

    def test_posvoji_macko(self):
        z = Zavetisce2()
        z.najdena('Taček', 'pes')
        z.najdena('Šarki', 'pes')
        z.najdena('Tom', 'mačka')
        z.najdena('Nyan', 'mačka')
        z.najdena('Rex', 'pes')
        z.najdena('Elsa', 'mačka')
        z.najdena('Ork', 'pes')
        z.najdena('Oprah', 'mačka')
        self.assertEqual(z.posvoji_macko(), 'Tom')
        self.assertEqual(z.posvoji_macko(), 'Nyan')
        self.assertEqual(z.posvoji_macko(), 'Elsa')
        self.assertEqual(z.posvoji_macko(), 'Oprah')
        self.assertIsNone(z.posvoji_macko())

    def test_posvoji_macko_2(self):
        z = Zavetisce2()
        z.najdena('Taček', 'pes')
        z.najdena('Šarki', 'pes')
        z.najdena('Tom', 'mačka')
        z.najdena('Nyan', 'mačka')
        self.assertEqual(z.posvoji_macko(), 'Tom')
        self.assertEqual(z.posvoji_macko(), 'Nyan')
        self.assertIsNone(z.posvoji_macko())
        z.najdena('Rex', 'pes')
        z.najdena('Elsa', 'mačka')
        z.najdena('Ork', 'pes')
        z.najdena('Oprah', 'mačka')
        self.assertEqual(z.posvoji_macko(), 'Elsa')
        self.assertEqual(z.posvoji_macko(), 'Oprah')
        self.assertIsNone(z.posvoji_macko())

    def test_posvoji_zival(self):
        z = Zavetisce2()
        z.najdena('Taček', 'pes')
        z.najdena('Šarki', 'pes')
        z.najdena('Tom', 'mačka')
        z.najdena('Nyan', 'mačka')
        z.najdena('Rex', 'pes')
        z.najdena('Elsa', 'mačka')
        z.najdena('Ork', 'pes')
        z.najdena('Oprah', 'mačka')
        self.assertEqual(z.posvoji_zival(), 'Taček')
        self.assertEqual(z.posvoji_zival(), 'Šarki')
        self.assertEqual(z.posvoji_zival(), 'Tom')
        self.assertEqual(z.posvoji_zival(), 'Nyan')
        self.assertEqual(z.posvoji_zival(), 'Rex')
        self.assertEqual(z.posvoji_zival(), 'Elsa')
        self.assertEqual(z.posvoji_zival(), 'Ork')
        self.assertEqual(z.posvoji_zival(), 'Oprah')
        self.assertIsNone(z.posvoji_zival())

    def test_posvoji_zival_2(self):
        z = Zavetisce2()
        z.najdena('Taček', 'pes')
        z.najdena('Šarki', 'pes')
        z.najdena('Tom', 'mačka')
        z.najdena('Nyan', 'mačka')
        self.assertEqual(z.posvoji_zival(), 'Taček')
        self.assertEqual(z.posvoji_zival(), 'Šarki')
        self.assertEqual(z.posvoji_zival(), 'Tom')
        self.assertEqual(z.posvoji_zival(), 'Nyan')
        self.assertIsNone(z.posvoji_zival())

        z.najdena('Rex', 'pes')
        z.najdena('Elsa', 'mačka')
        z.najdena('Ork', 'pes')
        z.najdena('Oprah', 'mačka')
        self.assertEqual(z.posvoji_zival(), 'Rex')
        self.assertEqual(z.posvoji_zival(), 'Elsa')
        self.assertEqual(z.posvoji_zival(), 'Ork')
        self.assertEqual(z.posvoji_zival(), 'Oprah')
        self.assertIsNone(z.posvoji_zival())

    def test_posvoji_mesano(self):
        z = Zavetisce2()
        z.najdena('Taček', 'pes')
        z.najdena('Šarki', 'pes')
        z.najdena('Tom', 'mačka')
        z.najdena('Nyan', 'mačka')
        z.najdena('Rex', 'pes')
        z.najdena('Elsa', 'mačka')
        z.najdena('Ork', 'pes')
        z.najdena('Oprah', 'mačka')
        self.assertEqual(z.posvoji_zival(), 'Taček')
        self.assertEqual(z.posvoji_macko(), 'Tom')
        self.assertEqual(z.posvoji_zival(), 'Šarki')
        self.assertEqual(z.posvoji_psa(), 'Rex')
        self.assertEqual(z.posvoji_macko(), 'Nyan')
        self.assertEqual(z.posvoji_psa(), 'Ork')
        self.assertIsNone(z.posvoji_psa())
        self.assertEqual(z.posvoji_zival(), 'Elsa')
        self.assertEqual(z.posvoji_macko(), 'Oprah')
        self.assertIsNone(z.posvoji_macko())
        self.assertIsNone(z.posvoji_zival())

    def test_posvoji_mesano_2(self):
        z = Zavetisce2()
        z.najdena('Taček', 'pes')
        z.najdena('Šarki', 'pes')
        z.najdena('Tom', 'mačka')
        z.najdena('Nyan', 'mačka')
        self.assertEqual(z.posvoji_macko(), 'Tom')
        self.assertEqual(z.posvoji_psa(), 'Taček')
        self.assertEqual(z.posvoji_zival(), 'Šarki')
        self.assertIsNone(z.posvoji_psa())
        self.assertEqual(z.posvoji_zival(), 'Nyan')
        self.assertIsNone(z.posvoji_zival())
        self.assertIsNone(z.posvoji_macko())

        z.najdena('Rex', 'pes')
        z.najdena('Elsa', 'mačka')
        z.najdena('Ork', 'pes')
        z.najdena('Oprah', 'mačka')
        self.assertEqual(z.posvoji_zival(), 'Rex')
        self.assertEqual(z.posvoji_psa(), 'Ork')
        self.assertIsNone(z.posvoji_psa())
        self.assertEqual(z.posvoji_zival(), 'Elsa')
        self.assertEqual(z.posvoji_macko(), 'Oprah')
        self.assertIsNone(z.posvoji_macko())
        self.assertIsNone(z.posvoji_zival())


if __name__ == '__main__':
    unittest.main()
